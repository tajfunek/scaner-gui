THREE.EffectComposer=function(renderer,renderTarget){if(this.renderer=renderer,void 0===renderTarget){var parameters={minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBAFormat,stencilBuffer:!1},size=renderer.getDrawingBufferSize();(renderTarget=new THREE.WebGLRenderTarget(size.width,size.height,parameters)).texture.name="EffectComposer.rt1"}this.renderTarget1=renderTarget,this.renderTarget2=renderTarget.clone(),this.renderTarget2.texture.name="EffectComposer.rt2",this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2,this.passes=[],void 0===THREE.CopyShader&&console.error("THREE.EffectComposer relies on THREE.CopyShader"),void 0===THREE.ShaderPass&&console.error("THREE.EffectComposer relies on THREE.ShaderPass"),this.copyPass=new THREE.ShaderPass(THREE.CopyShader)},Object.assign(THREE.EffectComposer.prototype,{swapBuffers:function(){var tmp=this.readBuffer;this.readBuffer=this.writeBuffer,this.writeBuffer=tmp},addPass:function(pass){this.passes.push(pass);var size=this.renderer.getDrawingBufferSize();pass.setSize(size.width,size.height)},insertPass:function(pass,index){this.passes.splice(index,0,pass)},render:function(delta){var maskActive=!1,pass,i,il=this.passes.length;for(i=0;i<il;i++)if(!1!==(pass=this.passes[i]).enabled){if(pass.render(this.renderer,this.writeBuffer,this.readBuffer,delta,maskActive),pass.needsSwap){if(maskActive){var context=this.renderer.context;context.stencilFunc(context.NOTEQUAL,1,4294967295),this.copyPass.render(this.renderer,this.writeBuffer,this.readBuffer,delta),context.stencilFunc(context.EQUAL,1,4294967295)}this.swapBuffers()}void 0!==THREE.MaskPass&&(pass instanceof THREE.MaskPass?maskActive=!0:pass instanceof THREE.ClearMaskPass&&(maskActive=!1))}},reset:function(renderTarget){if(void 0===renderTarget){var size=this.renderer.getDrawingBufferSize();(renderTarget=this.renderTarget1.clone()).setSize(size.width,size.height)}this.renderTarget1.dispose(),this.renderTarget2.dispose(),this.renderTarget1=renderTarget,this.renderTarget2=renderTarget.clone(),this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2},setSize:function(width,height){this.renderTarget1.setSize(width,height),this.renderTarget2.setSize(width,height);for(var i=0;i<this.passes.length;i++)this.passes[i].setSize(width,height)}}),THREE.Pass=function(){this.enabled=!0,this.needsSwap=!0,this.clear=!1,this.renderToScreen=!1},Object.assign(THREE.Pass.prototype,{setSize:function(width,height){},render:function(renderer,writeBuffer,readBuffer,delta,maskActive){console.error("THREE.Pass: .render() must be implemented in derived pass.")}});